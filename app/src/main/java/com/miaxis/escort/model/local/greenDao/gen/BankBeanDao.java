package com.miaxis.escort.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.escort.model.entity.BankBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_BEAN".
*/
public class BankBeanDao extends AbstractDao<BankBean, String> {

    public static final String TABLENAME = "BANK_BEAN";

    /**
     * Properties of entity BankBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Bankcode = new Property(1, String.class, "bankcode", false, "BANKCODE");
        public final static Property Bankno = new Property(2, String.class, "bankno", false, "BANKNO");
        public final static Property Bankname = new Property(3, String.class, "bankname", false, "BANKNAME");
        public final static Property Banktype = new Property(4, String.class, "banktype", false, "BANKTYPE");
        public final static Property Banklevel = new Property(5, String.class, "banklevel", false, "BANKLEVEL");
        public final static Property Phoneno = new Property(6, String.class, "phoneno", false, "PHONENO");
        public final static Property Bankaddress = new Property(7, String.class, "bankaddress", false, "BANKADDRESS");
        public final static Property Parentcode = new Property(8, String.class, "parentcode", false, "PARENTCODE");
        public final static Property Opuser = new Property(9, String.class, "opuser", false, "OPUSER");
        public final static Property Opdate = new Property(10, String.class, "opdate", false, "OPDATE");
        public final static Property Remark = new Property(11, String.class, "remark", false, "REMARK");
        public final static Property Subcount = new Property(12, String.class, "subcount", false, "SUBCOUNT");
        public final static Property Opusername = new Property(13, String.class, "opusername", false, "OPUSERNAME");
        public final static Property Banktypename = new Property(14, String.class, "banktypename", false, "BANKTYPENAME");
        public final static Property Syscode = new Property(15, String.class, "syscode", false, "SYSCODE");
    }


    public BankBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BankBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"BANKCODE\" TEXT," + // 1: bankcode
                "\"BANKNO\" TEXT," + // 2: bankno
                "\"BANKNAME\" TEXT," + // 3: bankname
                "\"BANKTYPE\" TEXT," + // 4: banktype
                "\"BANKLEVEL\" TEXT," + // 5: banklevel
                "\"PHONENO\" TEXT," + // 6: phoneno
                "\"BANKADDRESS\" TEXT," + // 7: bankaddress
                "\"PARENTCODE\" TEXT," + // 8: parentcode
                "\"OPUSER\" TEXT," + // 9: opuser
                "\"OPDATE\" TEXT," + // 10: opdate
                "\"REMARK\" TEXT," + // 11: remark
                "\"SUBCOUNT\" TEXT," + // 12: subcount
                "\"OPUSERNAME\" TEXT," + // 13: opusername
                "\"BANKTYPENAME\" TEXT," + // 14: banktypename
                "\"SYSCODE\" TEXT);"); // 15: syscode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bankcode = entity.getBankcode();
        if (bankcode != null) {
            stmt.bindString(2, bankcode);
        }
 
        String bankno = entity.getBankno();
        if (bankno != null) {
            stmt.bindString(3, bankno);
        }
 
        String bankname = entity.getBankname();
        if (bankname != null) {
            stmt.bindString(4, bankname);
        }
 
        String banktype = entity.getBanktype();
        if (banktype != null) {
            stmt.bindString(5, banktype);
        }
 
        String banklevel = entity.getBanklevel();
        if (banklevel != null) {
            stmt.bindString(6, banklevel);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(7, phoneno);
        }
 
        String bankaddress = entity.getBankaddress();
        if (bankaddress != null) {
            stmt.bindString(8, bankaddress);
        }
 
        String parentcode = entity.getParentcode();
        if (parentcode != null) {
            stmt.bindString(9, parentcode);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(10, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(11, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        String subcount = entity.getSubcount();
        if (subcount != null) {
            stmt.bindString(13, subcount);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(14, opusername);
        }
 
        String banktypename = entity.getBanktypename();
        if (banktypename != null) {
            stmt.bindString(15, banktypename);
        }
 
        String syscode = entity.getSyscode();
        if (syscode != null) {
            stmt.bindString(16, syscode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bankcode = entity.getBankcode();
        if (bankcode != null) {
            stmt.bindString(2, bankcode);
        }
 
        String bankno = entity.getBankno();
        if (bankno != null) {
            stmt.bindString(3, bankno);
        }
 
        String bankname = entity.getBankname();
        if (bankname != null) {
            stmt.bindString(4, bankname);
        }
 
        String banktype = entity.getBanktype();
        if (banktype != null) {
            stmt.bindString(5, banktype);
        }
 
        String banklevel = entity.getBanklevel();
        if (banklevel != null) {
            stmt.bindString(6, banklevel);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(7, phoneno);
        }
 
        String bankaddress = entity.getBankaddress();
        if (bankaddress != null) {
            stmt.bindString(8, bankaddress);
        }
 
        String parentcode = entity.getParentcode();
        if (parentcode != null) {
            stmt.bindString(9, parentcode);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(10, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(11, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        String subcount = entity.getSubcount();
        if (subcount != null) {
            stmt.bindString(13, subcount);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(14, opusername);
        }
 
        String banktypename = entity.getBanktypename();
        if (banktypename != null) {
            stmt.bindString(15, banktypename);
        }
 
        String syscode = entity.getSyscode();
        if (syscode != null) {
            stmt.bindString(16, syscode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BankBean readEntity(Cursor cursor, int offset) {
        BankBean entity = new BankBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bankno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bankname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // banktype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // banklevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phoneno
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bankaddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parentcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // opuser
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // opdate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // subcount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // opusername
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // banktypename
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // syscode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBankcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBankno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBanktype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBanklevel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneno(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBankaddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOpuser(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOpdate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSubcount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOpusername(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBanktypename(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSyscode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BankBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(BankBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
