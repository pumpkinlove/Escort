package com.miaxis.escort.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.escort.model.entity.TaskUpBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_UP_BEAN".
*/
public class TaskUpBeanDao extends AbstractDao<TaskUpBean, Void> {

    public static final String TABLENAME = "TASK_UP_BEAN";

    /**
     * Properties of entity TaskUpBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Taskno = new Property(0, String.class, "taskno", false, "TASKNO");
        public final static Property Taskseq = new Property(1, String.class, "taskseq", false, "TASKSEQ");
        public final static Property Tasktype = new Property(2, String.class, "tasktype", false, "TASKTYPE");
        public final static Property Deptno = new Property(3, String.class, "deptno", false, "DEPTNO");
        public final static Property Deptno2 = new Property(4, String.class, "deptno2", false, "DEPTNO2");
        public final static Property Opuser = new Property(5, String.class, "opuser", false, "OPUSER");
        public final static Property Opusername = new Property(6, String.class, "opusername", false, "OPUSERNAME");
        public final static Property Taskdate = new Property(7, String.class, "taskdate", false, "TASKDATE");
    }


    public TaskUpBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TaskUpBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_UP_BEAN\" (" + //
                "\"TASKNO\" TEXT," + // 0: taskno
                "\"TASKSEQ\" TEXT," + // 1: taskseq
                "\"TASKTYPE\" TEXT," + // 2: tasktype
                "\"DEPTNO\" TEXT," + // 3: deptno
                "\"DEPTNO2\" TEXT," + // 4: deptno2
                "\"OPUSER\" TEXT," + // 5: opuser
                "\"OPUSERNAME\" TEXT," + // 6: opusername
                "\"TASKDATE\" TEXT);"); // 7: taskdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_UP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskUpBean entity) {
        stmt.clearBindings();
 
        String taskno = entity.getTaskno();
        if (taskno != null) {
            stmt.bindString(1, taskno);
        }
 
        String taskseq = entity.getTaskseq();
        if (taskseq != null) {
            stmt.bindString(2, taskseq);
        }
 
        String tasktype = entity.getTasktype();
        if (tasktype != null) {
            stmt.bindString(3, tasktype);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String deptno2 = entity.getDeptno2();
        if (deptno2 != null) {
            stmt.bindString(5, deptno2);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(7, opusername);
        }
 
        String taskdate = entity.getTaskdate();
        if (taskdate != null) {
            stmt.bindString(8, taskdate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskUpBean entity) {
        stmt.clearBindings();
 
        String taskno = entity.getTaskno();
        if (taskno != null) {
            stmt.bindString(1, taskno);
        }
 
        String taskseq = entity.getTaskseq();
        if (taskseq != null) {
            stmt.bindString(2, taskseq);
        }
 
        String tasktype = entity.getTasktype();
        if (tasktype != null) {
            stmt.bindString(3, tasktype);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String deptno2 = entity.getDeptno2();
        if (deptno2 != null) {
            stmt.bindString(5, deptno2);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(7, opusername);
        }
 
        String taskdate = entity.getTaskdate();
        if (taskdate != null) {
            stmt.bindString(8, taskdate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TaskUpBean readEntity(Cursor cursor, int offset) {
        TaskUpBean entity = new TaskUpBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskseq
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tasktype
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deptno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deptno2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // opuser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // opusername
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // taskdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskUpBean entity, int offset) {
        entity.setTaskno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskseq(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTasktype(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeptno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeptno2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpuser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpusername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTaskdate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TaskUpBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TaskUpBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(TaskUpBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
