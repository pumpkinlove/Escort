package com.miaxis.escort.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.escort.model.entity.UpdateInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPDATE_INFO".
*/
public class UpdateInfoDao extends AbstractDao<UpdateInfo, String> {

    public static final String TABLENAME = "UPDATE_INFO";

    /**
     * Properties of entity UpdateInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Version = new Property(1, String.class, "version", false, "VERSION");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Filename = new Property(3, String.class, "filename", false, "FILENAME");
        public final static Property Opdate = new Property(4, String.class, "opdate", false, "OPDATE");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
    }


    public UpdateInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UpdateInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPDATE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"VERSION\" TEXT," + // 1: version
                "\"PATH\" TEXT," + // 2: path
                "\"FILENAME\" TEXT," + // 3: filename
                "\"OPDATE\" TEXT," + // 4: opdate
                "\"DESCRIPTION\" TEXT);"); // 5: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPDATE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpdateInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(5, opdate);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpdateInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(5, opdate);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UpdateInfo readEntity(Cursor cursor, int offset) {
        UpdateInfo entity = new UpdateInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // version
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // opdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpdateInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UpdateInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UpdateInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UpdateInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
